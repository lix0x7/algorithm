/**
 *
 * tag: 双指针 ad-hoc
 *
 * 11. 盛最多水的容器
 * 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
 *
 * 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
 *
 * 返回容器可以储存的最大水量。
 *
 * 说明：你不能倾斜容器。
 *
 * 示例 1：
 *
 *
 *
 * 输入：[1,8,6,2,5,4,8,3,7]
 * 输出：49
 * 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
 * 示例 2：
 *
 * 输入：height = [1,1]
 * 输出：1
 *
 *
 * 提示：
 *
 * n == height.length
 * 2 <= n <= 105
 * 0 <= height[i] <= 104
 */

/**
 * @param {number[]} height
 * @return {number}
 */
var maxArea = function(height) {
    let i = 0, j = height.length;
    let rtn = 0;
    while (i < j){
        let h;
        const w = j - i;
        if (height[i] < height[j]){
            h = height[i];
            i++;
        }else {
            h = height[j];
            j--;
        }
        const curArea = h * w;
        rtn = rtn > curArea ? rtn : curArea;
    }

    return rtn;
}

/**
 * 思路
 * 本题思路就是通过双指针遍历到所有可能的左右边，在遍历的过程中得到最大的容积。
 * 双指针移动思路：
 * 容器面积 = min(左边，右边) * 宽度
 * 1. 如果移动较高的一边，则宽度减少，min(左边，右边)不变或变小，面积只会更小
 * 2. 如果移动较矮的一边，则宽度减少，min(左边，右边)可能变大、变小或不变，面积才有可能变大
 * 按照如上思路，只有每次遍历过程都移动短边才有可能获取更大的容器。
 * 但其实个人觉得上述说法不是很严谨，严谨证明还是比较复杂的
 *
 * 感受
 * 这题其实有点ad-hoc，背下来就好了
 */