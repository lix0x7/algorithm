/**
 * 239. 滑动窗口最大值
 * 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。
 *
 * 返回 滑动窗口中的最大值 。
 *
 *
 *
 * 示例 1：
 *
 * 输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
 * 输出：[3,3,5,5,6,7]
 * 解释：
 * 滑动窗口的位置                最大值
 * ---------------               -----
 * [1  3  -1] -3  5  3  6  7       3
 *  1 [3  -1  -3] 5  3  6  7       3
 *  1  3 [-1  -3  5] 3  6  7       5
 *  1  3  -1 [-3  5  3] 6  7       5
 *  1  3  -1  -3 [5  3  6] 7       6
 *  1  3  -1  -3  5 [3  6  7]      7
 * 示例 2：
 *
 * 输入：nums = [1], k = 1
 * 输出：[1]
 *
 *
 * 提示：
 *
 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104
 * 1 <= k <= nums.length
 * 通过次数301,734提交次数604,069
 */

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var maxSlidingWindow = function (nums, k) {
  const rtn = [];
  // 维护单调栈，栈中的元素由栈底到栈顶递减，栈底元素即为窗口内最大元素
  let q = [];
  let r = 0;
  while (r < nums.length) {
    const cur = nums[r];
    // 如果后入栈的元素a大于栈中元素b，那么a一定比b后离开窗口，所以此时可以将b出栈
    while (q.length > 0 && q[q.length - 1] < cur){
      q.pop();
    }
    q.push(cur);

    // 将离开窗口的元素从栈中移除
    if (nums[r - k + 1] === q[0]){
      q.shift();
    }
    rtn.push(q[0]);

    r++;
  }

  return rtn.slice(k - 1);
};

console.log(maxSlidingWindow([1,3,4,4,4,-1,-3,5,3,6,7], 3), [4,4,4,4,4,5,5,6,7])

/**
 * tag 经典 错题 滑动窗口 单调队列
 *
 * 核心在于维护单调队列
 *
 * todo 存疑，官方答案在栈中维护的是数字下标，我的实现维护的是实际数字，但运行计时分别是200ms vs 8000ms，不理解...
 *
 */